package hw4.game;

import java.util.ArrayList;
import java.util.Random;

import hw4.maze.Cell;
import hw4.maze.CellComponents;
import hw4.maze.Grid;
import hw4.maze.Row;
import hw4.player.Player;

public class Game {

    //--------------helper functions------------
    
    //function to move the player to a new cell on a new row
    private boolean movePlayer(Player player, Row newRow, Cell newCell){
        
        player.setCurrentRow(newRow);
        player.setCurrentCell(newCell);

        return true;
    }


    private Grid grid;
    private Random random;

    //constructor for creating a game where the grid is passed in
	public Game(Grid grid) {
        this.grid = grid;
        this.random = new Random();
	}
    
    //constructor for creating a game where there isn't a grid being passed, instead the size of grid is passed in as well as created 
    public Game(int size){
        this.random = new Random();
        if(size >= 3 && size <= 7){
            this.grid = createRandomGrid(size);
        }
    }

    //returns the grid that the game is being played on
	public Grid getGrid() {
		return grid;
	}

    //sets the grid for the game by passing in a grid that is already made
	public void setGrid(Grid grid) {
	    this.grid = grid;	
	}
	
	public boolean play(Movement movement, Player player) {
        
        //edge case testing
        if(movement == null || player == null){
            return false;
        }

        //position setting 
        Row currentRow = player.getCurrentRow();
        Cell currentCell = player.getCurrentCell();
        ArrayList<Row> rows = grid.getRows();
        int rowIndex = rows.indexOf(currentRow);
        int cellIndex = currentRow.getCells().indexOf(currentCell);

        //checking if moves are possible or not based on what type of edge and the chosen movement;
        //going to use a switch statement for each type of movement up,down,left,right
        switch (movement) {

            case UP:

                if(currentCell.getUp() != CellComponents.APERTURE){
                    return false;
                }

                if(rowIndex <= 0){
                    return false; //cant move down if they are already at the bottom row
                }

                Row upRow = rows.get(rowIndex - 1);
                Cell upCell = upRow.getCells().get(cellIndex);


                return movePlayer(player, upRow, upCell);

            case DOWN:

                if(currentCell.getDown() != CellComponents.APERTURE){
                    return false;
                }

                if(rowIndex >= rows.size() - 1){
                    return false; //cant move down if they are already at the bottom row
                }

                Row downRow = rows.get(rowIndex + 1);
                Cell downCell = downRow.getCells().get(cellIndex);


                return movePlayer(player, downRow, downCell);

            case LEFT:

                if(currentCell.getLeft() == CellComponents.WALL){ //have to change this compared to the other becuase it can go left on aptr or exit
                    return false; 
                }
                if(cellIndex <= 0){ //this is for when they are trying to move left and on the left side of the screen
                    //check if exit
                    if(currentCell.getLeft() == CellComponents.EXIT){
                        return true;
                    }
                }
                //update position to the left
                Cell leftCell = currentRow.getCells().get(cellIndex - 1);

                //return new position success or fail
                return movePlayer(player, currentRow, leftCell);

            case RIGHT:

                if(currentCell.getRight() != CellComponents.APERTURE){
                    return false;
                }

                if(cellIndex >= rows.size() - 1){
                    return false; //cant move down if they are already at the bottom row
                }

                //update position
                Cell rightCell = currentRow.getCells().get(cellIndex + 1);

                //return new position success or fail
                return movePlayer(player, currentRow, rightCell);

            default:
                return false;
        }
	}

    //logic to create a random grid
	public Grid createRandomGrid(int gridSize) {
        //make sure that the grid size fits within the parameters
        if(gridSize < 3 || gridSize > 7){
            return null; //grid size is not valid
        }

        ArrayList<Row> rows = new ArrayList<>();

        //now time to actually create the grid using a double for loop
        for(int i = 0; i < gridSize; i++){ //create all the rows
            ArrayList<Cell> cells = new ArrayList<>();
            for(int j = 0; j < gridSize; j++){ //fill in the colums for each row using cells
                //logic is as follows --> if it is on the edge the the left, right, up, or down needs to be a wall, otherwise it can be an aperature
                CellComponents left;
                if(j == 0){ //this will be on the left side so it needs to be a wall
                    left = CellComponents.WALL;
                }
                else{
                    left = CellComponents.APERTURE;
                }

                //right components
                CellComponents right;
                if(j == gridSize - 1){ //this will be on the right side so it needs to be a wall
                    right = CellComponents.WALL;
                }
                else{
                    right = CellComponents.APERTURE; //anywhere else the right side will be an aperature
                }

                //up components
                CellComponents up;
                if(i == 0){ //this will be on the top so it needs to be a wall
                    up = CellComponents.WALL;
                }
                else{
                    up = CellComponents.APERTURE; //anywhere else the top side will be an aperature
                }

                //down components
                CellComponents down;
                if(j == gridSize - 1){ //this will be on the bottom of the grid so they have to be walls
                    down = CellComponents.WALL;
                }
                else{
                    down = CellComponents.APERTURE; //anywhere elss the down side going to be an aperature
                }
                cells.add(new Cell(left, right, up, down));
            }
            rows.add(new Row(cells));
        }

        //add the exit to a random spot on the left side of the grid
        int randomRow = new Random().nextInt(gridSize);
        for(int i = 0; i < gridSize; i++){
            Cell leftCell = rows.get(i).getCells().get(0);
            if(i == randomRow){
                leftCell.setLeft(CellComponents.EXIT);
            }
            else{
                leftCell.setLeft(CellComponents.WALL); //pretty sure this is redundant since i already made them walls if they are on the left up above
            }
        }

		return new Grid(rows);
	}

    //to string method
	@Override
    public String toString() {
        return "Game [grid=" + grid + "]";
    }

}
