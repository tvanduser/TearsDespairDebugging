package hw4.game;

import java.util.ArrayList;
import java.util.Random;

import hw4.maze.Cell;
import hw4.maze.CellComponents;
import hw4.maze.Grid;
import hw4.maze.Row;
import hw4.player.Player;
import hw4.player.Movement;

public class Game {

    //--------------helper functions------------
    
    //function to move the player to a new cell on a new row
    private boolean movePlayer(Player player, Row newRow, Cell newCell){
        
        player.setCurrentRow(newRow);
        player.setCurrentCell(newCell);

        return true;
    }

    //------------end of helper functions------------


    private Grid grid;
    private Random random;

    //constructor for creating a game where the grid is passed in
	public Game(Grid grid) {
        this.grid = grid;
        this.random = new Random();
	}
    
    //constructor for creating a game where there isn't a grid being passed, instead the size of grid is passed in as well as created 
    public Game(int size){
        this.random = new Random();
        if(size >= 3 && size <= 7){
            this.grid = createRandomGrid(size);
        }
    }

    //returns the grid that the game is being played on
	public Grid getGrid() {
		return grid;
	}

    //sets the grid for the game by passing in a grid that is already made
	public void setGrid(Grid grid) {
	    this.grid = grid;	
	}
	
	public boolean play(Movement movement, Player player) {
        
        //edge case testing
        if(movement == null || player == null){
            return false;
        }

        //position setting 
        Row currentRow = player.getCurrentRow();
        Cell currentCell = player.getCurrentCell();
        ArrayList<Row> rows = grid.getRows();
        int rowIndex = rows.indexOf(currentRow);
        int cellIndex = currentRow.getCells().indexOf(currentCell);

        //checking if moves are possible or not based on what type of edge and the chosen movement;
        //going to use a switch statement for each type of movement up,down,left,right
        switch (movement) {

            case UP:

                if(currentCell.getUp() != CellComponents.APERTURE){
                    return false;
                }

                if(rowIndex <= 0){
                    return false; //cant move down if they are already at the bottom row
                }

                Row upRow = rows.get(rowIndex - 1);
                Cell upCell = upRow.getCells().get(cellIndex);


                return movePlayer(player, upRow, upCell);

            case DOWN:

                if(currentCell.getDown() != CellComponents.APERTURE){
                    return false;
                }

                if(rowIndex >= rows.size() - 1){
                    return false; //cant move down if they are already at the bottom row
                }

                Row downRow = rows.get(rowIndex + 1);
                Cell downCell = downRow.getCells().get(cellIndex);


                return movePlayer(player, downRow, downCell);

            case LEFT:

                if(currentCell.getLeft() == CellComponents.WALL){ //have to change this compared to the other becuase it can go left on aptr or exit
                    return false; 
                }
                if(cellIndex <= 0){ //this is for when they are trying to move left and on the left side of the screen

                    if(currentCell.getLeft() == CellComponents.EXIT){
                        return true;
                    }
                }
                //update position to the left
                Cell leftCell = currentRow.getCells().get(cellIndex - 1);

                //return new position success or fail
                return movePlayer(player, currentRow, leftCell);

            case RIGHT:

                if(currentCell.getRight() != CellComponents.APERTURE){
                    return false;
                }

                if(cellIndex >= rows.size() - 1){
                    return false; //cant move down if they are already at the bottom row
                }

                //update position
                Cell rightCell = currentRow.getCells().get(cellIndex + 1);

                //return new position success or fail
                return movePlayer(player, currentRow, rightCell);

            default:
                return false;
        }
	}

    //logic to create a random grid
	public Grid createRandomGrid(int gridSize) {
		if (gridSize < 3 || gridSize > 7) {
			return null;
		}

		ArrayList<Row> rows = new ArrayList<>();
		ArrayList<ArrayList<Cell>> allCells = new ArrayList<>();
		Random rand = new Random();

		for (int i = 0; i < gridSize; i++) {
			ArrayList<Cell> rowCells = new ArrayList<>();
			for (int j = 0; j < gridSize; j++) {
				CellComponents left, right, up, down;

				// LEFT: share from previous cell's right
				if (j == 0) {
					left = CellComponents.WALL;
				} else {
					left = rowCells.get(j - 1).getRight();
				}

				// UP: share from above cell's down
				if (i == 0) {
					up = CellComponents.WALL;
				} else {
					up = allCells.get(i - 1).get(j).getDown();
				}

				// RIGHT: random unless on far right
				if (j == gridSize - 1) {
					right = CellComponents.WALL;
				} else {
					right = rand.nextBoolean() ? CellComponents.WALL : CellComponents.APERTURE;
				}

				// DOWN: random unless on bottom row
				if (i == gridSize - 1) {
					down = CellComponents.WALL;
				} else {
					down = rand.nextBoolean() ? CellComponents.WALL : CellComponents.APERTURE;
				}

				// Ensure at least one APERTURE for the cell
				if (left != CellComponents.APERTURE &&
					right != CellComponents.APERTURE &&
					up != CellComponents.APERTURE &&
					down != CellComponents.APERTURE) {
					// Open one random direction if not on edge
					ArrayList<String> directions = new ArrayList<>();
					if (j > 0) directions.add("left");
					if (j < gridSize - 1) directions.add("right");
					if (i > 0) directions.add("up");
					if (i < gridSize - 1) directions.add("down");

					String openDir = directions.get(rand.nextInt(directions.size()));
					switch (openDir) {
						case "left": left = CellComponents.APERTURE; break;
						case "right": right = CellComponents.APERTURE; break;
						case "up": up = CellComponents.APERTURE; break;
						case "down": down = CellComponents.APERTURE; break;
					}
				}

				rowCells.add(new Cell(left, right, up, down));
			}
			allCells.add(rowCells);
			rows.add(new Row(rowCells));
		}

		// Add EXIT on a random left edge
		int randomRow = rand.nextInt(gridSize);
		for (int i = 0; i < gridSize; i++) {
			Cell leftCell = rows.get(i).getCells().get(0);
			leftCell.setLeft(i == randomRow ? CellComponents.EXIT : CellComponents.WALL);
		}

		return new Grid(rows);
	}
	``


    //to string method
	@Override
    public String toString() {
        return "Game [grid=" + grid + "]";
    }

}
